package com.igorcrevar.rolloversphere.game.screens;

import java.util.List;

import com.badlogic.gdx.Game;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.math.Vector3;
import com.igorcrevar.rolloversphere.game.GameTypes;
import com.igorcrevar.rolloversphere.game.SettingsHelper;
import com.igorcrevar.rolloversphere.game.screens.TheGame.GameStatus;
import com.igorcrevar.rolloversphere.game.screens.TheGame.NotifStates;
import com.igorcrevar.rolloversphere.objects.boxes.Box;
import com.igorcrevar.rolloversphere.objects.boxes.UpgradeType;
import com.igorcrevar.rolloversphere.objects.boxes.factory.ChallengeBoxesFactory;
import com.igorcrevar.rolloversphere.objects.boxes.factory.IBoxesFactory;

public class ChallengeGame extends TheGame{

	public ChallengeGame(Game game) {
		super(game);		
	}

	@Override
	protected IBoxesFactory getBoxesFactory() {		
		return new ChallengeBoxesFactory();
	}

	@Override
	protected void renderGameSpecific(float timeDiff) {
		//if at least one expired and we didnt pick it - game over
		if (GameStatus.PLAY == mGameStatus && mBoxesManager.getExpired().size() > 0){
			mGameStatus = GameStatus.GAMEOVER;
			mNotifTextAnimationState = NotifStates.FADE_IN;
			mNotifTextColor = Color.RED;
			mNotifTextColor.a = 0.0f;
		}
		
		mSpriteBatch.begin();
		//draw player points
		mFont.setColor(Color.WHITE);
		mFont.setColor(1.0f, 1.0f, 1.0f, 1.0f);
		String str = String.format("Points: %d", mPointsManager.getScore());
		mFont.draw(mSpriteBatch, str, getScreenX(5.0f), getScreenY(5.0f));	
		
		if (GameStatus.PLAY == mGameStatus){
			upgradeTimeoutUpdateAndRender(timeDiff);
			renderNotificationText(timeDiff, 0.9f, 0.5f, NotifStates.NOT_SHOW);
		}
		else{			 
			mGameOverTimer += timeDiff;
			//prevent overflow
			if (mGameOverTimer > 100.0f){
				mGameOverTimer = mGameOverTimer - 100.0f;
			}
			mNotifText = "Game over!";
			renderNotificationText(timeDiff, 2.2f, 2.0f, NotifStates.FADE_IN);
		}
		
		mPointsManager.update(timeDiff);	
		mSpriteBatch.end();
		
		}
	}
	
	@Override
	protected Thread getBoxThread() {
		return new Thread(new Runnable() {			
			@Override
			public void run(){
				float deltaCurrentPass = 2.0f;
				long lastTime = System.currentTimeMillis() - 10000;
				while(mGameStatus == GameStatus.PLAY){
					long time = System.currentTimeMillis();
					float delta = (float)((time - lastTime) / 1000.0);
					if (delta > deltaCurrentPass){
						mBoxesManager.addNew(mMainBall.position, mMainBall.boundingSphereR);
						deltaCurrentPass -= 0.005f;
						if (deltaCurrentPass < 0.1f){
							deltaCurrentPass = 0.1f;
						}
						lastTime = time;
					}					
					try {						
						Thread.sleep(500);
					} catch (InterruptedException e) {
					}
				}
			}
		});
	}

	@Override
	protected GameTypes getGameType() {
		return GameTypes.CHALLENGE;
	}
}

